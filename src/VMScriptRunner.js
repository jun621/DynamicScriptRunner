/*
The following code triggers a script to run in a VM instance (EC2) via DynamoDB event.
*/

const AWS = require('aws-sdk');
const fs = require('fs');
const { nanoid } = require('nanoid');

// Configure AWS SDK
AWS.config.update({ region: 'us-west-1' });

const dynamodb = new AWS.DynamoDB();
const s3 = new AWS.S3();

const TableName = 'DynamicTable';
const inputFile = 'Archive.zip';
const outputFile = 'output.txt';
//const BucketName = 'fullstackjun';

const id = nanoid();

/*
Retrieve the inputs from DynamoDB using an autogenerated ID.
*/

const retrieveInput = () => {
  const params = {
    TableName: TableName,
    Key: {
      id: { S: id },
    },
  };

  dynamodb.getItem(params, (err, data) => {
    if (err) {
      console.error('Error occurred while downloading inputs from DynamoDB', err);
    } else {
      const input = data.Item.Archive.zip.S;
      console.log('Successfully downloaded the inputs from DynamoDB ', data);
      downloadFile();
    }
  });
};

/*
Downloading the inputFile from S3.
*/

const downloadFile = () => {
  const params = {
    BucketName: bucketName,
    Key: inputFile,
  };

  // Create a write stream for the inputFile
  const file = fs.createWriteStream(inputFile);

  s3.getObject(params)
    .createReadStream()
    .on('error', (err) => {
      console.error('Error downloading inputFile from S3 to VM', err);
    })
    .pipe(file)
    .on('finish', () => {
      console.log('Successfully downloaded inputFile from S3');
      appendInputTextFile();
    });
};

/*
Append retrieved input text to the inputFile.
*/

const appendInputTextFile = () => {
  dynamodb.getItem(
    {
      TableName: TableName,
      Key: {
        id: { S: id },
      },
    },
    (err, data) => {
      if (err) {
        console.error('Unable to retrieve inputs from DynamoDB', err);
      } else {
        const input = data.Item.input_text.S;
        fs.appendFile(outputFile, 'retrieved File', (err) => {
          if (err) {
            console.error('Error appending text to inputFile', err);
          } else {
            console.log('Input text appended to outputFile', outputFile);
            // Upload the outputFile to S3
            uploadOutputFile();
          }
        });
      }
    }
  );
};

/*
Upload the inputFile to S3.
*/

const uploadOutputFile = () => {
  const params = {
    Bucket: BucketName,
    Key: outputFile,
    // Read the OutputFile
    Body: fs.createReadStream(outFile),
  };

  s3.upload(params, (err, data) => {
    if (err) {
      console.err('File could not be uploaded', err);
    } else {
      console.log('File was successfully uploaded', data);
      saveOutput(data.location);
    }
  });
};

/*
Save the outputs and S3 path in the DynamoDB table.
*/

const saveOutput = (output_file_path) => {
  dynamodb.putItem(
    {
      TableName: TableName,
      Item: {
        id: { S: id },
        output_file_path: { S: output_file_path },
      },
    },
    (err) => {
      if (err) {
        console.err('Failed to save output to DynamoDb', err);
      } else {
        console.log('Successfully saved output to DynamoDb');
        terminateVM();
      }
    }
  );
};

/*
Terminate the VM automatically.
*/

const terminateVM = () => {
  // Implementation for terminating the VM goes here
};














